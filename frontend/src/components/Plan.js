import { useEffect, useState } from "react";
import { addToDo, getAllToDo, updateToDo, deleteToDo, updateToDoStatus } from "../utils/HandleApi";
import ToDo from "./ToDo";

export default function Plan() {
  const [toDo, setToDo] = useState([]);
  const [text, setText] = useState("");
  const [isUpdating, setIsUpdating] = useState(false);
  const [toDoId, setToDoId] = useState(null);

  // L·∫•y danh s√°ch k·∫ø ho·∫°ch khi component mount
  useEffect(() => {
    fetchToDos();
  }, []);

  // H√†m l·∫•y danh s√°ch k·∫ø ho·∫°ch
  const fetchToDos = async () => {
    try {
      const data = await getAllToDo();
      setToDo(Array.isArray(data) ? data : []);
    } catch (error) {
      console.error("L·ªói khi t·∫£i danh s√°ch k·∫ø ho·∫°ch:", error);
      setToDo([]);
    }
  };

  // Th√™m k·∫ø ho·∫°ch m·ªõi
  const handleAdd = async () => {
    if (text.trim()) {
      await addToDo(text);
      setText("");
      fetchToDos();
    }
  };

  // C·∫≠p nh·∫≠t k·∫ø ho·∫°ch
  const handleUpdate = async () => {
    if (text.trim() && toDoId) {
      await updateToDo(toDoId, text);
      setText("");
      setIsUpdating(false);
      setToDoId(null);
      fetchToDos();
    }
  };

  // C·∫≠p nh·∫≠t tr·∫°ng th√°i (ƒêang th·ª±c hi·ªán ‚Üî Ho√†n th√†nh ‚Üî Quan tr·ªçng)
  const toggleStatus = async (id, nextState) => {
    // let newStatus;
  
    // if (currentStatus === "ƒêang th·ª±c hi·ªán") {
    //   newStatus = "Quan tr·ªçng";
    // } else if (currentStatus === "Quan tr·ªçng") {
    //   newStatus = "Ho√†n th√†nh";
    // } else if (currentStatus !== "Ho√†n th√†nh") {
    //   newStatus = "Ho√†n th√†nh";
    // } else {
    //   return; // Kh√¥ng thay ƒë·ªïi n·∫øu ƒë√£ ho√†n th√†nh
    // }
  
    await updateToDoStatus(id, nextState);
    fetchToDos();
  };
    
  

  

  // Chuy·ªÉn sang ch·∫ø ƒë·ªô c·∫≠p nh·∫≠t
  const updateMode = (id, text) => {
    setIsUpdating(true);
    setText(text);
    setToDoId(id);
  };

  // X√≥a k·∫ø ho·∫°ch
  const handleDelete = async (id) => {
    await deleteToDo(id);
    fetchToDos();
  };

  // Ph√¢n lo·∫°i k·∫ø ho·∫°ch theo tr·∫°ng th√°i
  const importantTasks = toDo.filter(item => item.status === "Quan tr·ªçng");
  const ongoingTasks = toDo.filter(item => item.status === "ƒêang th·ª±c hi·ªán");
  const completedTasks = toDo.filter(item => item.status === "Ho√†n th√†nh");

  return (
    <div className="container">
      <h1>K·∫ø Ho·∫°ch C√° Nh√¢n</h1>
  
      <div className="top">
        <input 
          type="text"
          placeholder="Nh·∫≠p k·∫ø ho·∫°ch c·ªßa b·∫°n..."
          value={text}
          onChange={(e) => setText(e.target.value)}
        />
        <button 
          className="add"
          onClick={isUpdating ? handleUpdate : handleAdd}
        >
          {isUpdating ? "C·∫≠p nh·∫≠t" : "Th√™m"}
        </button>
      </div>
  
      {/* Danh s√°ch k·∫ø ho·∫°ch */}
      <div className="list">
        {toDo.length === 0 ? ( 
          <p className="empty-message">Kh√¥ng c√≥ k·∫ø ho·∫°ch n√†o</p>
        ) : (
          <>
            {/* C√¥ng vi·ªác Quan tr·ªçng */}
            {importantTasks.length > 0 && (
              <>
                <h3>üî• Quan tr·ªçng</h3>
                {importantTasks.map((item) => (
                  <ToDo 
                    key={item._id} 
                    text={item.text}
                    updateMode={() => updateMode(item._id, item.text)}
                    deleteToDo={() => handleDelete(item._id)}
                    toggleStatus={(nextState) => toggleStatus(item._id, nextState)}
                    status={item.status}
                  />
                ))}
              </>
            )}
  
            {/* C√¥ng vi·ªác ƒêang th·ª±c hi·ªán */}
            {ongoingTasks.length > 0 && (
              <>
                <h3>üìå ƒêang th·ª±c hi·ªán</h3>
                {ongoingTasks.map((item) => (
                  <ToDo 
                    key={item._id} 
                    text={item.text}
                    updateMode={() => updateMode(item._id, item.text)}
                    deleteToDo={() => handleDelete(item._id)}
                    toggleStatus={(nextState) => toggleStatus(item._id, nextState)}
                    status={item.status}
                  />
                ))}
              </>
            )}
  
            {/* C√¥ng vi·ªác Ho√†n th√†nh */}
            {completedTasks.length > 0 && (
              <>
                <h3>‚úÖ Ho√†n th√†nh</h3>
                {completedTasks.map((item) => (
                  <ToDo 
                    key={item._id} 
                    text={item.text}
                    updateMode={() => updateMode(item._id, item.text)}
                    deleteToDo={() => handleDelete(item._id)}
                    toggleStatus={(nextState) => toggleStatus(item._id, nextState)}
                    status={item.status}
                  />
                ))}
              </>
            )}
          </>
        )}
      </div>
    </div>
  );
  
}
